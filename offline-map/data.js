import UTILITIES from"https://www.gteh.top/offline-map/utilities.js";import DRAWING from"https://www.gteh.top/offline-map/drawing.js";import SETTINGS from"./settings.js";import ACTIONS from"https://www.gteh.top/offline-map/actions.js";import DOCUMENT from"https://www.gteh.top/offline-map/document.js";import DIRECTIONS from"https://www.gteh.top/offline-map/directions.js";const WALKING_SPEED_METER_PER_SECOND=4,DATA={parseOBA:(t,e,s,o)=>{const{list:n,references:i}=t.data,r={routes:[],positions:{},stations:{},types:[]},a={},c={},l={},d=t=>t.replaceAll("_","."),u=t=>(t-s)*o,p=t=>-(t-e)*o;i.stops.forEach(t=>{const{name:e,id:s,lat:o,lon:n}=t,i=e.split(" ").sort().join(" ");i in a||(a[i]={xPositions:[],yPositions:[]},l[i]=s),c[s]=i,a[i].name=e,a[i].xPositions.push(u(n)),a[i].yPositions.push(p(o))}),Object.keys(a).forEach(t=>{const{name:e,xPositions:s,yPositions:o}=a[t];r.stations[d(l[t])]={name:e,color:colorFromCode(t),zone:0,x:listAverage(s),z:listAverage(o)}}),n.forEach(t=>{const{schedule:e,tripId:s}=t,{stopTimes:o}=e,n=i.trips.find(t=>t.id===s).routeId,a=i.routes.find(t=>t.id===n),{color:T,shortName:h,longName:I,description:S,type:m}=a,f=[],E=[],g=[];for(let t=0;t<o.length;t++){const e=o[t].stopId,s=d(l[c[e]])+"_"+d(n);f.push(s),g.push(0),t>0&&E.push(20*(o[t].arrivalTime-o[t-1].arrivalTime));const a=i.stops.find(t=>t.id===e);r.positions[s]={x:u(a.lon),y:p(a.lat),angle:UTILITIES.directionToAngle(a.direction)}}const y=UTILITIES.convertGtfsRouteType(m);r.routes.push({id:d(n),color:""===T?colorFromCode(n):parseInt(T,16),name:I||S,number:h,type:y,stations:f,durations:E,densities:g,circular:""}),r.types.includes(y)||r.types.push(y)}),DATA.parseMTR([r])},parseMTR:t=>{DATA.json=t,ACTIONS.setupRouteTypeAndDimensionButtons(),t[SETTINGS.dimension].connections={};const{routes:e,positions:s,stations:o,connections:n}=t[SETTINGS.dimension],i=document.getElementById("search_results_routes");i.innerHTML="";const r=document.getElementById("search_results_stations");r.innerHTML="";const a=[];e.forEach(t=>{"id"in t||(t.id=t.color.toString()),SETTINGS.selectedRouteTypes.includes(t.type)&&a.push(t.id),i.append(ACTIONS.getRouteElement(t.id,t.color,t.name,t.number,t.type,!1,!0,"search_route_"+t.id,!0))});const c={};Object.keys(s).forEach(t=>{const e=t.split("_"),o=e[0],n=e[1];if(a.includes(n)){o in c||(c[o]={xPositions:[],yPositions:[],routeIds:[],types:[]},UTILITIES.angles.forEach(t=>c[o][`routes${t}`]=[]));const{x:e,y:i,vertical:r}=s[t],a="angle"in s[t]?s[t].angle:UTILITIES.angles[r?0:2];c[o].xPositions.push(e),c[o].yPositions.push(i),c[o][`routes${a}`].push(n)}}),Object.values(c).forEach(t=>{UTILITIES.angles.forEach(e=>t[`routes${e}`]=t[`routes${e}`].sort()),t.x=listAverage(t.xPositions),t.y=listAverage(t.yPositions),delete t.xPositions,delete t.yPositions});for(const t in o)for(const e in o)t!==e&&(t in n||(n[t]=[]),n[t].push({route:null,station:e,duration:20*DIRECTIONS.calculateDistance(o,t,e)/4}));const l={},d={};let u=1;e.forEach(t=>{const e=t.stations;for(let s=0;s<e.length;s++){const o=t.id,i=e[s].split("_")[0];if(s>0){const r=e[s-1].split("_")[0];if(r!==i&&a.includes(o)){const e=[r,i].sort(),n=e[0]===r,a=o+e.join(" "),p=t.densities[s-1];a in l?(l[a].density+=p,u=Math.max(u,l[a].density)):(l[a]={color:t.color,segments:[getSegmentDetails(r,o,c),getSegmentDetails(i,o,c)],selected:DATA.routeSelected(o,r,i),id:o,density:p},u=Math.max(u,p)),a in d?d[a][n?0:1]=!0:d[a]=[n,!n]}r in n||(n[r]=[]),n[r].push({route:t,station:i,duration:t.durations[s-1]})}i in c&&(c[i].routeIds.push(o),c[i].types.push(t.type))}}),Object.keys(d).forEach(t=>{d[t][0]!==d[t][1]&&t in l&&(l[t+"_arrows1"]=l[t],l[t+"_arrows2"]=l[t])});const p={},T={},h=t=>SETTINGS.selectedDirectionsStations.length>0?SETTINGS.selectedDirectionsStations.includes(t):0===SETTINGS.selectedRoutes.length||c[t].routeIds.some(t=>SETTINGS.selectedRoutes.includes(t));for(const t in c){const e=UTILITIES.angles.map(e=>c[t][`routes${e}`].length);p[t]={id:t,name:o[t].name,width:(Math.max(1,Math.max(e[0],e[1]))+1)*SETTINGS.size*6,height:(Math.max(1,Math.max(e[2],e[3]))+1)*SETTINGS.size*6,left:c[t].x,top:c[t].y,angle:e[1]+e[3]>e[0]+e[2]?45:0,selected:h(t),types:c[t].types},UTILITIES.angles.forEach(e=>p[t][`routes${e}`]=c[t][`routes${e}`]),o[t].connections.filter(t=>t in c).forEach(e=>{T[`${t}_${e}_connection`]={x1:c[t].x,y1:c[t].y,x2:c[e].x,y2:c[e].y,selected:h(t)&&h(e)}})}Object.keys(o).forEach(t=>{const e=ACTIONS.getStationElement(o[t].color,o[t].name,t,"search_station_"+t);e.setAttribute("style","display: none"),r.append(e)}),Object.values(l).forEach(t=>{t.density=(t=>1-(t-1)**2)(t.density/u)}),DIRECTIONS.writeStationsInResult(1),DIRECTIONS.writeStationsInResult(2),DOCUMENT.onSearch(),DRAWING.drawMap(l,p,T)},routeSelected:(t,e,s)=>{if(SETTINGS.selectedDirectionsStations.length>0){const o=SETTINGS.selectedDirectionsSegments[t];return o&&(!e||!s||o.includes(`${e}_${s}`)||o.includes(`${s}_${e}`))}return 0===SETTINGS.selectedRoutes.length||SETTINGS.selectedRoutes.includes(t)},redraw:()=>DATA.parseMTR(DATA.json),json:[]},getSegmentDetails=(t,e,s)=>{const o=s[t],n=UTILITIES.angles.find(t=>o[`routes${t}`].includes(e));return{x:o.x,y:o.y,direction:n,offsetIndex:o[`routes${n}`].indexOf(e),routeCount:o[`routes${n}`].length}},listAverage=t=>0===t.length?0:t.reduce((t,e)=>t+e,0)/t.length,colorFromCode=t=>Math.round(t.replace(/[^0-9]/g,"")/200*16777215)%16777215;export default DATA;