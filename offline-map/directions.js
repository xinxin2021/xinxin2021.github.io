import UTILITIES from"https://www.gteh.top/offline-map/utilities.js";import ACTIONS from"https://www.gteh.top/offline-map/actions.js";import DATA from"https://www.gteh.top/offline-map/data.js";import SETTINGS from"./settings.js";import FetchData from"https://www.gteh.top/offline-map/fetch.js";const DATA_REFRESH_INTERVAL=5e3;let shouldFetch=!1,stationStart=0,stationEnd=0,pathStations={},pathRoutes=[];const DIRECTIONS={onSearch:t=>{shouldFetch=!1;const e=DATA.json[SETTINGS.dimension].stations,n=document.getElementById("directions_box_"+t).value.toLowerCase().replace(/\|/g," ");document.getElementById("clear_directions_"+t+"_icon").innerText=""===n?"":"clear",document.getElementById("directions_result").style.display="none",1===t?stationStart=0:stationEnd=0;const s=""===n?[]:Object.keys(e).filter(t=>e[t].name.replace(/\|/g," ").toLowerCase().includes(n));for(const n in e)document.getElementById("directions_"+t+"_"+n).style.display=s.includes(n)?"block":"none";document.getElementById("search_results_stations_"+t).style.maxHeight=Math.max(window.innerHeight-320,64)/4+"px",document.getElementById("directions").style.maxHeight=window.innerHeight-80+"px"},onSelectStation:(t,e)=>{const n=DATA.json[SETTINGS.dimension];document.getElementById("clear_directions_"+t+"_icon").innerText="clear",document.getElementById("directions_box_"+t).value=n.stations[e].name.replace(/\|/g," ");for(const e in n.stations)document.getElementById("directions_"+t+"_"+e).style.display="none";1===t?stationStart=e:stationEnd=e,0!==stationStart&&0!==stationEnd&&(document.getElementById("directions_result").style.display="",document.getElementById("directions_result_route").innerHTML=`<div class="info_center"><span class="material-icons large">${stationStart===stationEnd?"horizontal_rule":"refresh"}</span></div>`,shouldFetch=!0,FETCH_DATA.fetchData())},writeStationsInResult:t=>{DATA.json[SETTINGS.dimension]},calculateDistance:(t,e,n,s)=>Math.abs(n-t)+Math.abs(s-e),drawDirectionsRoute:(t,e)=>{(t.length>0||Object.keys(e).length>0)&&(SETTINGS.selectedRoutes=[]),SETTINGS.selectedDirectionsStations=t,SETTINGS.selectedDirectionsSegments=e,DATA.redraw()},stopRefresh:()=>shouldFetch=!1},FETCH_DATA=new FetchData(()=>`${SETTINGS.url}route?dimension=${SETTINGS.dimension}&startStation=${stationStart}&endStation=${stationEnd}`,5e9,!1,()=>shouldFetch&&0!==stationStart&&0!==stationEnd&&stationStart!==stationEnd,t=>{const{start:e,directions:n}=t,s=document.getElementById("directions_result_route");s.innerHTML="",pathStations=[],pathRoutes=[];const a=(t,e,s)=>{if(t<n.length){const a=n[t];if(e in a)return a[e][s]}return null},o=(t,e)=>{const n=DATA.json[SETTINGS.dimension].stations;return t in n?n[t][e]:null},i=t=>new Date(Date.now()+50*t).toLocaleTimeString(),l=(t,e,n)=>{const s=DATA.json[SETTINGS.dimension].routes.find(s=>{const a=s.stations;let o=-1;for(let s=0;s<a.length;s++)if(a[s]===`${e}_${t}`)o=s+1;else if(o===s&&a[s]===`${n}_${t}`)return!0;return!1});if(s){if(""===s.circular){const t=s.stations;return o(t[t.length-1].split("_")[0],"name").replace(/\|/g," ")}return ACTIONS.getClosestInterchangeOnRoute(s,e).replace(/\|/g," ")}return null};let r=0,c=0,d=0,m=null,p=0,u=e.pos[0],T=e.pos[2],I=e.station.id;const h=a(0,"route","color"),E=a(null==h?1:0,"route","wait"),S=a(0,"station","id")!==I;if(S){pathStations.push(I);const t=document.createElement("div");t.className="route_station_name_inner",t.innerHTML=`<div class="route_segment_name">${e.station.name.replace(/\|/g," ")}</div>`+`<div class="route_segment_time">${i(p+E)}</div>`,s.append(UTILITIES.getDrawStationElement(t,null,h))}for(let t=0;t<n.length;t++){const e=n[t],h=e.duration,E=e.pos[0],g=e.pos[2],_="route"in e,f=e.station.id,w=f===I;let y=null;if(pathStations.push(f),t>0||S){let t=0;if(_){const n=e.route,a=n.stations,o=n.type,i=a.length;r+=i,c++,y=n.color,t=n.wait;for(let t=0;t<a.length;t++){const e=a[t];pathStations.push(e),y in pathRoutes||(pathRoutes[y]=[]),0===t?pathRoutes[y].push(`${I}_${a[t]}`):pathRoutes[y].push(`${a[t-1]}_${a[t]}`)}SETTINGS.selectedRouteTypes.includes(o)||SETTINGS.selectedRouteTypes.push(o),s.append(UTILITIES.getDrawLineElement("commit",createTextElement(i.toString()),y))}else s.append(UTILITIES.getDrawLineElement(w?"transfer_within_a_station":"directions_walk",createTextElement(w?"":`${Math.round(DIRECTIONS.calculateDistance(u,T,E,g)/100)/10} km`),null)),r++;w||s.append(UTILITIES.getDrawLineElement("schedule",createTextElement(UTILITIES.formatTime((h-t)/20)),y))}p+=h;const D=a(t+1,"route","color"),L=document.createElement("div");L.className="route_station_name_inner",L.innerHTML=`<div class="route_segment_name">${e.station.name.replace(/\|/g," ")}</div>`+`<div class="route_segment_time">${i(p+(null==D?0:a(t+1,"route","wait")))}</div>`,s.append(UTILITIES.getDrawStationElement(L,y,D));const $=e.platform,x=a(t+1,"station","id");if(!_&&null!=D&&$){s.append(UTILITIES.getDrawLineElement(UTILITIES.routeTypes[a(t+1,"route","type")],createTextElement(a(t+1,"route","name").split("||")[0].replace(/\|/g," ")),D));const e=a(t+1,"route","circular"),n=a(t+1,"route","number").replace(/\|/g," ");s.append(UTILITIES.getDrawLineElement(""===e?"":"cw"===e?"rotate_right":"rotate_left",createTextElement((n?n+" ":"")+l(D,f,a(t+1,"route","stations")[0])),D,`<span class="platform_circle" style="background: ${UTILITIES.convertColor(D)}">${$}</span>`))}const A=o(f,"zone");null!=D&&null==m?m=A:null==D&&null!=m&&x!==f&&(d+=Math.abs(m-A)+2,m=null),u=E,T=g,I=f}const g=document.createElement("div");g.className="info_center",g.innerHTML+='<div class="info_middle"><span class="material-icons small">schedule</span>'+`<span class="text">${UTILITIES.formatTime((p-E)/20)}</span>`+'&nbsp;&nbsp;&nbsp;<span class="material-icons small">confirmation_number</span>'+`<span class="text">$${d}</span>`+'&nbsp;&nbsp;&nbsp;<span class="material-icons small">commit</span>'+`<span class="text">${r}</span>`+'&nbsp;&nbsp;&nbsp;<span class="material-icons small">transfer_within_a_station</span>'+`<span class="text">${Math.max(0,c-1)}</span>`+"</div>",s.append(g),document.getElementById("directions").style.maxHeight=window.innerHeight-80+"px",DIRECTIONS.drawDirectionsRoute(pathStations,pathRoutes)}),createTextElement=t=>{const e=document.createElement("div");return e.innerText=t,e};export default DIRECTIONS;